

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://denev6.github.io/</id>
  <title>Jin's Notes</title>
  <subtitle>AI, 수학, Python, Golang을 다루는 학생입니다.</subtitle>
  <updated>2025-01-26T10:19:59+09:00</updated>
  <author>
    <name>박성진</name>
    <uri>https://denev6.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://denev6.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="https://denev6.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2025 박성진 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Docker 기반 딥러닝 모델 API 구축하기</title>
    <link href="https://denev6.github.io/playground/2025/01/17/ml-api.html" rel="alternate" type="text/html" title="Docker 기반 딥러닝 모델 API 구축하기" />
    <published>2025-01-17T00:00:00+09:00</published>
  
    <updated>2025-01-17T00:00:00+09:00</updated>
  
    <id>https://denev6.github.io/playground/2025/01/17/ml-api.html</id>
    <content src="https://denev6.github.io/playground/2025/01/17/ml-api.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="Playground" />
    
  

  
    <summary>
      





      항상 공부를 하면서 궁금한 점이 있었다. 내가 만드는 기술이 사용자에게 닿기까지 어떤 과정이 있을까? 머신러닝 모델을 공부하면서도 같은 의문이 들었다. 그래서 이미지 파일을 받아 딥러닝 모델로 예측하는 API를 만들어 보았다.

Github: deep-learning-codes/ML-Ops

Model 학습

모델과 데이터셋을 고르는 기준은 단순하다. 로컬에서 가볍게 돌릴 수 있어야 한다. 지금은 모델이 중요한 게 아니라 그럴싸한 API를 만드는 것이 목표이기 때문에 성능보다 속도를 우선시했다. 데이터셋은 가벼운 Fashion MNIST를 사용했다. 28 x 28의 작은 크기 덕분에 빠르게 학습할 수 있다.

참고로 Fashion MNIST는 부츠, 운동화, 티셔츠, 가방 등 의류 이미지로 구성된 데이...
    </summary>
  

  </entry>

  
  <entry>
    <title>SVD를 이용한 이미지 압축</title>
    <link href="https://denev6.github.io/machine-learning/2025/01/08/svd.html" rel="alternate" type="text/html" title="SVD를 이용한 이미지 압축" />
    <published>2025-01-08T00:00:00+09:00</published>
  
    <updated>2025-01-08T00:00:00+09:00</updated>
  
    <id>https://denev6.github.io/machine-learning/2025/01/08/svd.html</id>
    <content src="https://denev6.github.io/machine-learning/2025/01/08/svd.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="Machine-Learning" />
    
  

  
    <summary>
      





      SVD: Singular Vector Decomposition에 대해 다룬다. 각 수식이 어떤 의미를 가지고, 이미지 압축에 어떻게 사용되는지 설명한다. 본 글을 이해하기 위해 아래 개념을 숙지하고 있어야 한다.

Vector: 크기와 방향을 가지는 양으로, 2차원 공간의 벡터는 $\vec{v}=\begin{bmatrix}u_1 &amp;amp; u_2\end{bmatrix}$와 같이 표현한다. 본문에서는 편의상 $v$ 형태로 표기한다.

Inversed matrix: $A$에 대한 역행렬로 $A^{-1}$로 표기하며, $A^{-1}A=I$라는 특징을 가진다.

Orthogonal matrix: 모든 column 벡터가 직교하는 행렬로, $AA^T=A^TA=I$라는 특징을 가진다. 동시에 $A^T=A^{-1}...
    </summary>
  

  </entry>

  
  <entry>
    <title>Edge detection</title>
    <link href="https://denev6.github.io/computer-vision/2025/01/06/edge-detection.html" rel="alternate" type="text/html" title="Edge detection" />
    <published>2025-01-06T00:00:00+09:00</published>
  
    <updated>2025-01-09T00:07:07+09:00</updated>
  
    <id>https://denev6.github.io/computer-vision/2025/01/06/edge-detection.html</id>
    <content src="https://denev6.github.io/computer-vision/2025/01/06/edge-detection.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="Computer-Vision" />
    
  

  
    <summary>
      





      엣지(edge) 검출은 객체의 경계를 찾는 방법으로 객체 판별 전처리 과정으로 사용한다. 본 글은 대표적인 엣지(이하 경계) 검출에 필요한 수학적 배경과 알고리즘에 대해 설명한다.



미분과 변화량

경계 검출의 핵심은 변화를 찾는 것이다. 객체와 배경은 밝기 차이가 있을 것이라고 가정한다. 밝기 변화가 일정 수준을 넘어가면 경계로 예측한다. 이미지가 복잡하면 잘못 검출될 가능성도 있지만 합리적인 아이디어라고 볼 수 있다.



그렇다면 변화를 정의해야 한다. 수학에서 변화율은 미분으로 정의한다. 연속 함수 $f(x)$에 대해 미분은 아래와 같다.

\[f'(x) = \cfrac{df}{dx}=\lim_{\bigtriangleup x \to 0}\cfrac{f(x+\bigtriangleup x)-f(...
    </summary>
  

  </entry>

  
  <entry>
    <title>이미지 변환 행렬과 OpenCV</title>
    <link href="https://denev6.github.io/computer-vision/2025/01/03/transformation.html" rel="alternate" type="text/html" title="이미지 변환 행렬과 OpenCV" />
    <published>2025-01-03T00:00:00+09:00</published>
  
    <updated>2025-01-08T00:08:04+09:00</updated>
  
    <id>https://denev6.github.io/computer-vision/2025/01/03/transformation.html</id>
    <content src="https://denev6.github.io/computer-vision/2025/01/03/transformation.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="Computer-Vision" />
    
  

  
    <summary>
      





      이미지 행렬의 이동, 확대, 축소 등 기하학적 변환에 대해 다룬다. C++로 작성한 OpenCV 코드를 사용한다. 원본 이미지 좌표는 $(x, y)$로, 변환된 이미지 좌표는 $(x’,y’)$로 표현한다. 간결한 코드를 위해 네임스페이스를 생략하며, 이미지를 읽는 과정도 생략한다. 코드에서 img는 원본 이미지, dst는 변환된 이미지이다.

원본 이미지의 모습이다.



OpenCV는 warpAffine과 perspectiveTransform 메서드를 지원한다.


  warpAffine: 어파인 변환 행렬을 이용
  perspectiveTransform: 투시 변환 행렬을 이용




이동 변환



이동(translation) 변환은 이미지 좌표를 x, y 방향으로 이동(shift)한다. 평행 이...
    </summary>
  

  </entry>

  
  <entry>
    <title>Attention is all you need</title>
    <link href="https://denev6.github.io/machine-learning/2024/04/10/transformer.html" rel="alternate" type="text/html" title="Attention is all you need" />
    <published>2024-04-10T00:00:00+09:00</published>
  
    <updated>2024-04-10T00:00:00+09:00</updated>
  
    <id>https://denev6.github.io/machine-learning/2024/04/10/transformer.html</id>
    <content src="https://denev6.github.io/machine-learning/2024/04/10/transformer.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="Machine-Learning" />
    
  

  
    <summary>
      





      Attention Is All You Need

본 글은 “Attention is All You Need” 논문을 번역 및 분석했다. 일부 문장은 맥락에 따라 의역되었으며, 명확한 이해를 위해 부분적으로 설명을 추가했다. 주요 용어는 정확한 의미 전달을 위해 영문 그대로 작성했다. (예: recurrent, convolutional 등)

Abstract 

기존 시퀀스 모델은 encoder-decoder가 포함된 복잡한 recurrent나 convolutional 신경망을 기반으로 한다. 본 논문은 recurrence와 convolution 없이 attention mechanisms을 기반으로 하는 간단한 Transformer 구조를 제안한다. 2종류의 기계번역 문제에서 좋은 성과를 보였고, 병렬화를...
    </summary>
  

  </entry>

</feed>


