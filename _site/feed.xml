

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://denev6.github.io/</id>
  <title>Jin's Notes</title>
  <subtitle>AI, 수학, Python, Golang을 다루는 학생입니다.</subtitle>
  <updated>2025-01-04T17:44:09+09:00</updated>
  <author>
    <name>박성진</name>
    <uri>https://denev6.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://denev6.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko-KR"
    href="https://denev6.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2025 박성진 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>이미지 변환 행렬과 OpenCV</title>
    <link href="https://denev6.github.io/computer%20vision/2025/01/03/transformation.html" rel="alternate" type="text/html" title="이미지 변환 행렬과 OpenCV" />
    <published>2025-01-03T00:00:00+09:00</published>
  
    <updated>2025-01-03T00:00:00+09:00</updated>
  
    <id>https://denev6.github.io/computer%20vision/2025/01/03/transformation.html</id>
    <content src="https://denev6.github.io/computer%20vision/2025/01/03/transformation.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="Computer Vision" />
    
  

  
    <summary>
      





      이미지 행렬의 이동, 확대, 축소 등 기하학적 변환에 대해 다룬다. C++로 작성한 OpenCV 코드를 사용한다. 원본 이미지 좌표는 $(x, y)$로, 변환된 이미지 좌표는 $(x’,y’)$로 표현한다. 간결한 코드를 위해 네임스페이스를 생략하며, 이미지를 읽는 과정도 생략한다. 코드에서 img는 원본 이미지, dst는 변환된 이미지이다.

원본 이미지의 모습이다.



OpenCV는 warpAffine과 perspectiveTransform 메서드를 지원한다.


  warpAffine: 어파인 변환 행렬을 이용
  perspectiveTransform: 투시 변환 행렬을 이용




이동 변환



이동(translation) 변환은 이미지 좌표를 x, y 방향으로 이동(shift)한다. 평행 이...
    </summary>
  

  </entry>

  
  <entry>
    <title>Attention is all you need</title>
    <link href="https://denev6.github.io/ai/2024/04/10/transformer.html" rel="alternate" type="text/html" title="Attention is all you need" />
    <published>2024-04-10T00:00:00+09:00</published>
  
    <updated>2024-04-14T16:08:59+09:00</updated>
  
    <id>https://denev6.github.io/ai/2024/04/10/transformer.html</id>
    <content src="https://denev6.github.io/ai/2024/04/10/transformer.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="AI" />
    
  

  
    <summary>
      





      Attention Is All You Need

본 글은 “Attention is All You Need” 논문을 번역 및 분석했다. 일부 문장은 맥락에 따라 의역되었으며, 명확한 이해를 위해 부분적으로 설명을 추가했다. 주요 용어는 정확한 의미 전달을 위해 영문 그대로 작성했다. (예: recurrent, convolutional 등)

Abstract 

기존 시퀀스 모델은 encoder-decoder가 포함된 복잡한 recurrent나 convolutional 신경망을 기반으로 한다. 본 논문은 recurrence와 convolution 없이 attention mechanisms을 기반으로 하는 간단한 Transformer 구조를 제안한다. 2종류의 기계번역 문제에서 좋은 성과를 보였고, 병렬화를...
    </summary>
  

  </entry>

  
  <entry>
    <title>Chripy 블로그 만들기</title>
    <link href="https://denev6.github.io/%EC%83%9D%EA%B0%81%20%EC%A0%95%EB%A6%AC/2023/10/15/init-chripy.html" rel="alternate" type="text/html" title="Chripy 블로그 만들기" />
    <published>2023-10-15T00:00:00+09:00</published>
  
    <updated>2023-10-15T00:00:00+09:00</updated>
  
    <id>https://denev6.github.io/%EC%83%9D%EA%B0%81%20%EC%A0%95%EB%A6%AC/2023/10/15/init-chripy.html</id>
    <content src="https://denev6.github.io/%EC%83%9D%EA%B0%81%20%EC%A0%95%EB%A6%AC/2023/10/15/init-chripy.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="생각 정리" />
    
  

  
    <summary>
      





      만약 본인이 Jekyll을 사용해본 경험이 있다면 공식 문서를 참고하는 게 더 빠를 수 있다. 그런데 Jekyll도 잘 모르고 FrontEnd도 잘 모르겠다하는 사람은 이 글을 잘 찾아왔다.

지금 보고 있듯이 Chirpy은 정말 깔끔한 Jekyll 테마이다. 하지만 막상 시작하려니 계속 문제가 생겨서 5시간 정도를 허무하게 날렸다. 모드 변경도 안 되고 난리도 아니였다. 심지어 로컬 PC를 사용할 수 없는 상황이라 Ruby를 설치하고 build를 할 수 없어 더 골치 아팠다. 결국 이미 Chripy로 블로그를 운영 중이신 otzslayer님의 repo를 fork해 초기화를 진행했다.




  처음 글을 작성할 당시는 군 복무 중이었기 때문에 Github 웹 에디터에서 글을 작성하고 바로 build,...
    </summary>
  

  </entry>

  
  <entry>
    <title>PySet을 Go답게</title>
    <link href="https://denev6.github.io/playground/2023/10/14/goset.html" rel="alternate" type="text/html" title="PySet을 Go답게" />
    <published>2023-10-14T00:00:00+09:00</published>
  
    <updated>2023-10-14T00:00:00+09:00</updated>
  
    <id>https://denev6.github.io/playground/2023/10/14/goset.html</id>
    <content src="https://denev6.github.io/playground/2023/10/14/goset.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="Playground" />
    
  

  
    <summary>
      





      PySet은 아주 유용한 자료구조이다. 이를 Go로 Go스럽게 구현하기 위해 CPython의 소스코드와 golang 소스코드를 살펴보았다. set과 map이 뒤에서 어떻게 작동하는지를 살펴보고 가장 합리적인 방법으로 집합을 구현해보려 한다.



문제

Python에는 집합이라는 아주 유용한 구조가 있다. set 객체는 크게 2가지 역할이 있는데, 중복 값을 제거하는 것과 빠르게 값을 탐색하는 것이다. 

n = [1, 3, 3, 5, 6, 3, 8]
n = set(n)
print(n)
# {1, 3, 5, 6, 8}

has_three = (3 in n)
print(has_three)
# True


하지만 Go는 set을 제공하지 않는다. 따라서 set과 유사하게 작동하는 객체를 만들어보려 한다. ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Support Vector Machine</title>
    <link href="https://denev6.github.io/ai/2023/10/10/svm.html" rel="alternate" type="text/html" title="Support Vector Machine" />
    <published>2023-10-10T00:00:00+09:00</published>
  
    <updated>2023-10-10T00:00:00+09:00</updated>
  
    <id>https://denev6.github.io/ai/2023/10/10/svm.html</id>
    <content src="https://denev6.github.io/ai/2023/10/10/svm.html" />
    <author>
      <name>박성진</name>
    </author>

  
    
    <category term="AI" />
    
  

  
    <summary>
      





      Linear SVM

Support Vector Machine은 분류 문제를 해결하는 머신러닝 기법이다. 대체적으로 준수한 성능을 보이며 SVM 또는 SVC(Support Vector Classifier)라고 부른다.

아이디어



직선으로 두 종류의 클래스를 분류하는 문제는 어렵지 않다. 그런데 과연 “어떤 경계가 가장 잘 분류했다고 할 수 있을까?”, “새로운 데이터가 추가되었을 때, 어떤 경계가 가장 잘 분류해낼까?” 이 질문의 답으로 Margin을 제안한다.

먼저 Support Vector를 알아보자.



경계(초평면)와 가장 인접한 양쪽의 데이터들을 Support Vector라고 한다. 그리고 경계(초평면)와 수직인 데이터 간 거리를 Margin이라고 한다.



이 때 Margin이 최...
    </summary>
  

  </entry>

</feed>


